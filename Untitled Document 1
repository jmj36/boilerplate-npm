Create the HTML Structure:

html

<!DOCTYPE html>
<html>
<head>
  <title>Async Web App</title>
</head>
<body>
  <h1>Web App with Async Functions</h1>
  <div id="data-container">
    <p>Loading data...</p>
  </div>
  <button id="fetch-data-button">Fetch Data</button>
  <script src="app.js"></script>
</body>
</html>

Create the JavaScript File (app.js):

javascript

    // Step 2: Define an async function to fetch data from an API
    async function fetchData() {
      try {
        const response = await fetch('https://jsonplaceholder.typicode.com/posts/1');
        if (!response.ok) {
          throw new Error('Network request failed');
        }
        const data = await response.json();
        return data;
      } catch (error) {
        throw error;
      }
    }

    // Step 3: Define a function to display data on the webpage
    function displayData(data) {
      const dataContainer = document.getElementById('data-container');
      dataContainer.innerHTML = `
        <h2>Data from API:</h2>
        <p>Title: ${data.title}</p>
        <p>Body: ${data.body}</p>
      `;
    }

    // Step 4: Add event listener to the Fetch Data button
    const fetchButton = document.getElementById('fetch-data-button');
    fetchButton.addEventListener('click', async () => {
      try {
        // Step 5: Fetch data and display it when the button is clicked
        const data = await fetchData();
        displayData(data);
      } catch (error) {
        // Handle errors, e.g., display an error message
        console.error('Error:', error);
      }
    });

Here's a breakdown of the code:

    Step 2: We define an async function fetchData that makes an asynchronous request to a sample JSON API and handles potential errors.

    Step 3: We define a function displayData that updates the webpage with the fetched data.

    Step 4: We add an event listener to the "Fetch Data" button.

    Step 5: Inside the event listener, we call the fetchData function, await the result, and then display the data on the webpage. If there's an error, we catch and handle it by displaying an error message.

This code creates a simple web app that fetches data from an API and displays it when the "Fetch Data" button is clicked, all using async functions to ensure a smooth user experience.

